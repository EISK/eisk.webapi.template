========================================================
Default set-up

Api Controller (in memory web)
DomainServices + Unit Tests
DataServices + Integration Tests (in memory db)
========================================================
Define test strategies
* Api Automated test (RestSharp or postman): minimal
* Domain Service Tests: business logic only (base methods of the domain services should be part of library test)
* Data Service Tests: Infrastructure tests - base tests, custom methods

========================================================
Factors

* In-memory database tests (in CI) 
* In-memory web tests (in CI) 

* Database tests (in CD) 
* Web UI Tests (in CD)
========================================================
TODO:

CI/CD (Remote)
DONE * Fix github connection
DONE * Install Github App in Azure
DONE * Fix CI issue (core)
DONE * Fix CI issue (template)
DONE * Fix CI issue (docs)

Build / packagaing
DONE * Run docs locally
* Run template builder locally

Code
DONE * fix unit tests
* added exception handler for controller
* add log functionality
* apply custom business logic

Others
* Finalize versioning
* include instruction for template build and publish
* check better way to handle exception classes
* test post and update methods
========================================================
DOCS

DONE * Finalize repo structure for docs
* Check versiona archive support in docfx
* Fix home page image issue
* Make automated deployment to home page (io/eisk.docs)
* Place web api home page and content under eisk.webapi/io sub-folder?
* Add blog site
========================================================
Modules

Client Side
* React (default)
* React Native
* Blazor

Web API Layer
* WebApi - ASP.NET Web API (default)
* WebApi.Azure - Azure Function (http)
* GraphAPI - Graph API
* gRPC - gRPC

Process Layer
* Process.AzureWebJob
* Process.AzureLogicApp
* ServerLess.AzureFunction (Scheduler)
* ServerLess.AWSLambda

Domain Layer
* DDD (default)
* CQRS

Data Service (in-memory)
* Memory: EF/SQLLite In-memory (default)
* Memory: SQL Server
* Memory: Couchbase
* Memory: Redis

Data Service
* RDBMS: SQL Server
* Key-Value Pair: Azure Table Storage
* Document database: COSMOS
* Graph database: COSMOS (gremline)
* Graph database: Neo4J
* Columnar database: Cassandra

========================================================
Repo Dependencies

- eisk.template (default)

- eisk.webapi (output repo)
- eisk.template.webapi (template sub module or main module)

- eisk.domain-services
- eisk.data-services (default)
- eisk.data-services.sql-server
- eisk.data-services.cosmosdb

- eisk.test-core (default shared across all, can be used as sub-module or main module)
- eisk.core (default shared across all, can be used as sub-module or main module)

========================================================
Docs Dependencies

- eisk.io 
	* single repo for site + docs, enables sharing common contents across modules
	* contains content and rendered pages, in different branch
	
	- / index page only

	- /eisk
		* site contents, can be moved to separate repo as needed
		* /eisk/why-eisk
		
	- /docs 
		* in future may contain home page
		* can be moved to separate repo as needed
	
	- /docs/eisk (default module)
		- /docs/{default module?}/{latest?}/getting-started
		- /docs/eisk/{latest?}/getting-started

	- /docs/webapi
		* in future may contain home page for WebAPI
		* in future may have sub-module webapi under docs sub-module 
		* will need to load sub-modules partially as needed under eisk.io, sub-module repo should be renamed as docs-webapi but should be downloaded as webapi)
		* /docs/webapi/latest/getting-started
		* /docs/webapi/v1/getting-started (archived)

- eisk.io/shared-site-resources
	* initially can be sub-folder which can be moved to separate repo
	
	- /assets
		* contains common header and footer where applicable
	
	- /contents
		* contains common contents

- eisk.io/blog (separate repo to contain blog)

========================================================