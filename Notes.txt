========================================================
Default set-up

Api Controller (in memory web)
DomainServices + Unit Tests
DataServices + Integration Tests (in memory db)
========================================================
Define test strategies
* Api Automated test (RestSharp or postman): minimal
* Domain Service Tests: business logic only (base methods of the domain services should be part of library test)
* Data Service Tests: Infrastructure tests - base tests, custom methods

========================================================
Factors

* In-memory database tests (in CI) 
* In-memory web tests (in CI) 

* Database tests (in CD) 
* Web UI Tests (in CD)
========================================================
TODO:

Fix CI (Remote)
DONE * Fix github connection
DONE * Install Github App in Azure
DONE * Fix CI issue (core)
DONE * Fix CI issue (template)
DONE * Fix CI issue (docs)

Fix CD (Remote)
DONE * Fix Azure Web (Staging)
DONE * Fix Azure Web (Prod)
DONE * Fix Nuget publish (.new new)
* Fix Github Release

Build / packagaing
DONE * Run docs locally
* Run template builder locally

Code
DONE * fix unit tests
* added exception handler for controller
* add log functionality
* apply custom business logic

Others
DONE * Finalize repo structure
DONE * Finalize doc structure
DONE * Finalize versioning
* Rename eisk.webapi.template to eisk.template
* include instruction for template build and publish
* check better way to handle exception classes
* test post and update methods
========================================================
V9.0.0 (basic only) Release Actions

CD
* Publish the rendered content to git repo

Code
* Remove obsolete methods (for .NET 6.0)
* Exclude unused project files (test projects)

========================================================
TODO Next:

DONE * Fix local run (web api) v8
DONE * Update version specific trigger for CD
* Fix deploy to web service v8

DONE * Fix local run (web api) v9
DONE * Update version specific trigger for CD
DONE * Create new app service for v9
* Deploy to web service v9

* Publish to git repo and 
* Publish git repo to integrate with with git release task

* build template and document
* identify test strategy, check base tests usability
* exclude non-default files from template
========================================================
Modules

Client Side
* React (default)
* React Native
* Blazor

Web API Layer
* WebApi - ASP.NET Web API (default)
* WebApi.Azure - Azure Function (http)
* GraphAPI - Graph API
* gRPC - gRPC

Process Layer
* Process.AzureWebJob
* Process.AzureLogicApp
* ServerLess.AzureFunction (Scheduler)
* ServerLess.AWSLambda

Domain Layer
* DDD (default)
* CQRS

Data Service (in-memory)
* Memory: EF/SQLLite In-memory (default)
* Memory: SQL Server
* Memory: Couchbase
* Memory: Redis

Data Service
* RDBMS: SQL Server
* Key-Value Pair: Azure Table Storage
* Document database: COSMOS
* Graph database: COSMOS (gremline)
* Graph database: Neo4J
* Columnar database: Cassandra

========================================================
Repo Dependencies

- eisk.template (default)

- eisk.webapi (output repo)
- eisk.template.webapi (template sub module or main module)

- eisk.domain-services
- eisk.data-services (default)
- eisk.data-services.sql-server
- eisk.data-services.cosmosdb

- eisk.test-core (default shared across all, can be used as sub-module or main module)
- eisk.core (default shared across all, can be used as sub-module or main module)

========================================================
EISK Version

v5.0 - Web Form Edition	.NET 4.0		VS2010,	10.0
v6.0 - MVC Edition		.NET 4.0		VS2012, 11.0
v7.0 - MVC Edition		.NET 4.5.1,		VS2013, 12.0.21005.1	- 10.0.40219.1
v8.0 - Web API Edition	.NET Core 2.0,	VS2017,	15.0.28307.168	- 10.0.40219.1 (Core V1.0)
v9.0 - Web API Edition	.NET 6.0		VS2022, 17.0.32112.339	- 10.0.40219.1
========================================================
Update Versions:

Eisk.WebApi.TemplatePack
	* Eisk.WebApi.proj
	* source.extension.vsixmanifest
Eisk.WebApi
	* Program.cs (for Swagger doc)
========================================================
Phases

DONE * Upgrade Template Pack to .NET 6.0
DONE * Fix CI issues
DONE * Build locally (docs)
DONE * Restructure (docs) - folder structure
DONE * Restructure (docs) - navigations (individual top, top nav, breadcrumbs)
DONE * Fix CD issues

* Build locally (template)
* CD to git-repo (as source)

========================================================
Release A New Version

* Update version in code and package
* Build the project in CI

Releasing the Web Site
* Staging - Web site will be deployed automatically
* Prod - Web site will be deployed automatically if staging is successful

Releasing in Nuget
* Trigger the DevOps manually (as nuget releases immutable i.e. can't be updated once created)

Releasing in Github Release
* Create tah in github
* Update version in DevOps release
* Template repo project readme.md will be included automatically in the release notes.
* Respective release as menionted in DevOps rlease will be updated automatically when master branch changed.

========================================================
Release Instructions

CD Contains the following

Staging (Web/github)
* Web to Azure
* Github Release (edit) - for draft, no need to create tags

Prod (Web/github/Nuget)
* Web to Azure
* Github Release (add) - for non-draft, only published once or create tag manually
* Github Release (edit)
* Published to nuget gallery

========================================================
CD Troubleshoot

VS2022/.NET 6.0
* Chaange VS2017 hosting to azure pipeline, 
	* Resolution: change in the edit release -> app service
* Error on Deployment, 
	* Resolution: change App Plan from Linux to Windows
* Issue: web api not showing after deployment
	* the api json was available, but the issue was due to swagger is not being accessible: https://stackoverflow.com/questions/55658948/asp-net-core-api-get-404-on-azure-app-service-but-works-ok-on-localhost
* Issue: App service not being deployed
	* Error: Web Deploy cannot modify the file 'Eisk.Core.dll' on the destination because it is locked by an external process.  In order to allow the publish operation to succeed, you may need to either restart your application to release the lock, or use the AppOffline rule handler for .Net applications on your next publish attempt.  Learn more at: http://go.microsoft.com/fwlink/?LinkId=221672#ERROR_FILE_IN_USE.  Learn more at: https://go.microsoft.com/fwlink/?LinkId=221672#ERROR_FILE_IN_USE. Error count: 1.
	* Solution: In Azure DevOps, releas task for app service, set, Use Offline settings as true

VS2017/.NET 2.0
* Issue: An error occurred while starting the application. .NET Core 4.6.26614.01 X86 v4.0.0.0    Microsoft.AspNetCore.Hosting version 2.0.3-rtm-10026    |    Microsoft Windows 10.0.14393
	* Enable detailed errors in azure portal: https://stackoverflow.com/questions/47134657/azure-webapp-asp-net-core-2-error-an-error-occurred-while-starting-the-applicat
* Issue: Could not load file or assembly 'System.Runtime, Version=6.0.0.0
	* In the build use specific .net sdk (2.0.0): https://stackoverflow.com/questions/59474379/failed-to-use-net-sdk-agent-in-azure-devops-build-pipeline

========================================================