========================================================
Test Strategy (Test Pyramid)

Manual Tests: (Integration Test)
    * Ad hoc tests
    * P1
App Tests: (Functional UI Test)
    * Covers only one happy path and one negative test for a given feature.
    * P4
Api Tests: (API Integration Test)
    * In-memory web tests
    * Covers only one happy path and one negative test for a given end point.
    * Attribute or field level tests can be skipped and can be included as part of System Tests for one entity
    * Can be used with build server
    * P5
Domain Service Tests: (Unit/Component Test)
    * In-memory tests (default): for smaller projects (assumes empty database in each test case)
    * Unit tests: for large projects
    * Tests only the business rules
    * Can be used with build server
    * P1
Data Service Tests: (Database Integration Test)
    * SQL Server integration tests (not included in solution by default)
    * Tests all database queries/operations
    * To be used in build and post-deployment (in dev/UAT environment)
    * P2: To be used with empty sql server with test seed data (in build envrionment)
    * P3: To be used with existing sql server with test seed data (in UAT envrionment) - smoke tests only
System Tests:
    * Health Check: (Configuration Integration Test)
        ** to be tested locally, dev, prod
        ** Includes db configuration tests (crud for one table)
        ** Any other external dependencies, like email server, blob storage
        ** Includes exception handling for web api, apps (by throwing error explicitly), to make sure it has debug more or custom error page as appropriate 
        ** Test http error codes (for at least 1 http code for an entity, including mapping to domain exception).
        ** Attribute level tests for api and apps can be done for only one entity for each type to make sure error is provided correctly.
        ** P3
========================================================
Reasons to consider testing base integration tests

Sql Server (in-memory)
- To verify if the ORM data model is not breaking (unsupported binding)
- To verify if the ORM is working as expected (may not be needed if ORM documentation is available)

Sql Server (generated from ORM)
- To verify if the ORM data model is not breaking (unsupported binding)
- To verify if the ORM is working as expected (may not be needed if ORM documentation is available)
- To verify if the valid test data working (column size)

Sql Server (live environment)
- To check if the schema is same (can be achieved via schema comparison tool)
- To check if the functionality is working as expected even if schema and database version is not identical

========================================================
========================================================
Testing ORM functionality in test core

- Single entity crud

- p: Create/Create: primary and foreign tables together
- p: Update/Create: exiting primary, create new fk row
- p: Update/Remove: existing primary, remove existing fk row
- p: Update/Update: updating pk and fk rows
- p: Remove/Remove: deleting pk willl remove all fk
- p: Remove/Update: deleting pk will update reference in fk only (no other update in fk table)
- p: Read/Read (eager): loading pk will load all fk
- p: Read/Read (lazy): loading pk will not not fk until property called

- the above behaviour is when saving pk and its impact on fk
- need to check the impact for the same behaviours on pk when fk is being saved

- Difference between fk property and fk object
=====â‰ˆ========
Factors

* In-memory database tests (in CI) 
* In-memory web tests (in CI) 
* Database tests (in CD) 
* Web UI Tests (in CD)
* Generic utility base classes
========================================================
    
